class Automata:
    def __init__(self):
        self.n=0
        self.q0=[]
        self.y=[]
        self.q=[]
        self.curState=0
        
class Task_03_02:
    def setbit(self,A,index,b,i):
        if b:
            A.q0[index]=A.q0[index]|(1<<i)
        else:
            A.q0[index]=A.q0[index]&~(1<<i)
        return 0
    
    def read(self,data):
        n,temp=data[0].split(" ")
        n=int(n)

        A=Automata()
        A.n=n

        for j in range(n):
            A.q0.append(int(temp[j]))

        for i in range(n):
            temp=[]
            for j in range(1<<(n+1)): temp.append(0)
            A.q.append(temp)

        
        for i in range(1,n+2):
            temp=data[i].split(" ")
            n1=int(temp[0])
            n2=int(temp[1])
            if i<n+1:
                for j in range(n1**n2):
                    A.q[i-1][j]=int(temp[2][j])
            else:
                for j in range(n1**n2):
                    A.y.append(int(temp[2][j]))

        state=0
        for i in range(n):
            self.setbit(A,state,i,n-i)

        A.curState=state
        return A,n

    def solvecurstate(self,A):
        state=A.curState
        for i in range(A.n):
            self.setbit(A,A.curState,A.q[i][state],A.n-i)
        return 0

    def main(self,data):
        data=data.split('\n')
        A1,n1=self.read(data)
        A2,n2=self.read(data[n1+2:])

        Mur=(1<<A1.n)+(1<<A2.n)-1

        print(Mur)
        '''
        for i in range(1<<(Mur+1)):
            for j in range(A1.n):
                self.setbit(A1,A1.curState,A1.q0[j],A1.n-j)
            for j in range(A2.n):
                self.setbit(A2,A2.curState,A2.q0[j],A2.n-j)

            for j in range(Mur+1):
                self.setbit(A1,A1.curState,((1&(1<<j))!=0),0)
                ans1=A1.y[A1.curState]
                self.solvecurstate(A1)

                self.setbit(A2,A2.curState,((1&(1<<j))!=0),0)
                ans2=A2.y[A2.curState]
                self.solvecurstate(A2)

                if ans1!=ans2:
                    print(0)
                    return 0
        '''
        return 1

                
                
            
            
    
'''
5 00000
2 6 0000000000000000000000000000001010111111111111111111111111111111
2 6 0000000000000010101111111111110101000000000000101011111111111111
2 6 0000001010111101010000101011110101000010101111010100001010111111
2 6 1010100101101001011010010110100101101001011010010110100101101011
2 6 1010110011001100110011001100110011001100110011001100110011001110
2 6 0000000000000000000000000000000000000000000000000000000000000011
5 00001
2 6 0000000000000000000000000000001010111111111111111111111111111111
2 6 0000000000000010101111111111110101000000000000101011111111111111
2 6 0000001010111101010000101011110101000010101111010100001010111111
2 6 1010100101101001011010010110100101101001011010010110100101101011
2 6 1010110011001100110011001100110011001100110011001100110011001110
2 6 0000000000000000000000000000000000000000000000000000000000000011

'''

s1="5 00000\n"
s2="2 6 0000000000000000000000000000001010111111111111111111111111111111\n"
s3="2 6 0000000000000010101111111111110101000000000000101011111111111111\n"
s4="2 6 0000001010111101010000101011110101000010101111010100001010111111\n"
s5="2 6 1010100101101001011010010110100101101001011010010110100101101011\n"
s6="2 6 1010110011001100110011001100110011001100110011001100110011001110\n"
s7="2 6 0000000000000000000000000000000000000000000000000000000000000011\n"
s8="5 00001\n"
s9="2 6 0000000000000000000000000000001010111111111111111111111111111111\n"
s10="2 6 0000000000000010101111111111110101000000000000101011111111111111\n"
s11="2 6 0000001010111101010000101011110101000010101111010100001010111111\n"
s12="2 6 1010100101101001011010010110100101101001011010010110100101101011\n"
s13="2 6 1010110011001100110011001100110011001100110011001100110011001110\n"
s14="2 6 0000000000000000000000000000000000000000000000000000000000000011\n"

s=s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14
#s="2 00\n2 3 00110011\n2 3 11100100\n2 3 01111101\n1 0\n2 2 1101\n2 2 0111"
B=Task_03_02()
B.main(s)
#print(a)
